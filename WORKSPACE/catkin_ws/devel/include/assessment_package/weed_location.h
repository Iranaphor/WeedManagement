// Generated by gencpp from file assessment_package/weed_location.msg
// DO NOT EDIT!


#ifndef ASSESSMENT_PACKAGE_MESSAGE_WEED_LOCATION_H
#define ASSESSMENT_PACKAGE_MESSAGE_WEED_LOCATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace assessment_package
{
template <class ContainerAllocator>
struct weed_location_
{
  typedef weed_location_<ContainerAllocator> Type;

  weed_location_()
    : id(0)
    , row(0)
    , xpos(0)
    , ypos(0)  {
    }
  weed_location_(const ContainerAllocator& _alloc)
    : id(0)
    , row(0)
    , xpos(0)
    , ypos(0)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef uint8_t _row_type;
  _row_type row;

   typedef uint8_t _xpos_type;
  _xpos_type xpos;

   typedef uint8_t _ypos_type;
  _ypos_type ypos;





  typedef boost::shared_ptr< ::assessment_package::weed_location_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assessment_package::weed_location_<ContainerAllocator> const> ConstPtr;

}; // struct weed_location_

typedef ::assessment_package::weed_location_<std::allocator<void> > weed_location;

typedef boost::shared_ptr< ::assessment_package::weed_location > weed_locationPtr;
typedef boost::shared_ptr< ::assessment_package::weed_location const> weed_locationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assessment_package::weed_location_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assessment_package::weed_location_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace assessment_package

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'assessment_package': ['/home/computing/Thorvald/WORKSPACE/catkin_ws/src/assessment_package/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::assessment_package::weed_location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assessment_package::weed_location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assessment_package::weed_location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assessment_package::weed_location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assessment_package::weed_location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assessment_package::weed_location_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assessment_package::weed_location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f660f9d4b49f000c880a057d53b40c1";
  }

  static const char* value(const ::assessment_package::weed_location_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f660f9d4b49f000ULL;
  static const uint64_t static_value2 = 0xc880a057d53b40c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::assessment_package::weed_location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assessment_package/weed_location";
  }

  static const char* value(const ::assessment_package::weed_location_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assessment_package::weed_location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n\
uint8 row\n\
uint8 xpos\n\
uint8 ypos\n\
\n\
";
  }

  static const char* value(const ::assessment_package::weed_location_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assessment_package::weed_location_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.row);
      stream.next(m.xpos);
      stream.next(m.ypos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct weed_location_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assessment_package::weed_location_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assessment_package::weed_location_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "row: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.row);
    s << indent << "xpos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.xpos);
    s << indent << "ypos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ypos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSESSMENT_PACKAGE_MESSAGE_WEED_LOCATION_H
